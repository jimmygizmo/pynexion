Intersting python error occurs in the app when a browser does it's built-in favicon.ico request:

This is becuse we have no code to handle when the URL patterns don't match exactly. The URL of this request matches the route pattern for the ToDo() handlerenough to arrive there at line 19. That route is very general:
@api.route('/<string:todo_id>')

Actually Flask-RESTplus is creating a nice HTML page for the 500 error that is thrown. 
Headers show:
500
INTERNAL SERVER ERROR

Looks nice in the browser.
Shows the stack trace nicely, with some formatting controls in the page.

Our REST app will take a planned strategy for when some or all of the URL does not make sense.

Regarding the HTTP status code/codes we will use for solving problems like this:
Obviously the 400 class means:
"Client sent an invalid request."
404 is actually the closest literal description.
It might be desireble to actually serve a favicon.ico file in this case and this could be handled at the Nginx level and Flask might never even need to see the /favicon.ico request at all as it would be intercepted and served by Nginx, however I am sure Flask could also serve it.
Since Flask-RESTplus provides the nice web app features for Swagger/OpenAPI and errors for browsers to use, we should be serviing a favicon.ico, but we of course need a general solution of different ways the URL will not match.
It seems like we should throw an HTTP 404 in all cases.


172.17.0.1 - - [23/Jul/2020 10:02:32] "GET /swagger.json HTTP/1.1" 200 -
172.17.0.1 - - [23/Jul/2020 10:02:38] "GET /hello HTTP/1.1" 200 -
172.17.0.1 - - [23/Jul/2020 10:02:43] "GET /favicon.ico HTTP/1.1" 500 -
Traceback (most recent call last):
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.8/dist-packages/flask_restplus/api.py", line 584, in error_router
    return original_handler(e)
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python3.8/dist-packages/flask/_compat.py", line 38, in reraise
    raise value.with_traceback(tb)
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.8/dist-packages/flask_restplus/api.py", line 584, in error_router
    return original_handler(e)
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/usr/local/lib/python3.8/dist-packages/flask/_compat.py", line 38, in reraise
    raise value.with_traceback(tb)
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/usr/local/lib/python3.8/dist-packages/flask_restplus/api.py", line 325, in wrapper
    resp = resource(*args, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/flask/views.py", line 89, in view
    return self.dispatch_request(*args, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/flask_restplus/resource.py", line 44, in dispatch_request
    resp = meth(*args, **kwargs)
  File "/var/www/service/api.py", line 18, in get
    return {todo_id: todos[todo_id]}
KeyError: 'favicon.ico'


